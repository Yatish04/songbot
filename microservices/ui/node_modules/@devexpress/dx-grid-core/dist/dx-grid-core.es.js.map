{"version":3,"file":"dx-grid-core.es.js","sources":["../src/plugins/grid-core/computeds.js","../src/plugins/sorting-state/reducers.js","../src/plugins/sorting-state/helpers.js","../src/utils/merge-sort.js","../src/utils/hierarchical-data.js","../src/plugins/integrated-sorting/computeds.js","../src/plugins/filtering-state/reducers.js","../src/plugins/filtering-state/helpers.js","../src/plugins/integrated-filtering/computeds.js","../src/plugins/grouping-state/constants.js","../src/plugins/grouping-state/reducers.js","../src/plugins/integrated-grouping/constants.js","../src/plugins/integrated-grouping/computeds.js","../src/plugins/custom-grouping/computeds.js","../src/plugins/grouping-panel/helpers.js","../src/plugins/paging-state/reducers.js","../src/plugins/integrated-paging/computeds.js","../src/plugins/paging-panel/helpers.js","../src/plugins/selection-state/reducers.js","../src/plugins/integrated-selection/computeds.js","../src/plugins/editing-state/reducers.js","../src/plugins/editing-state/computeds.js","../src/plugins/editing-state/helpers.js","../src/plugins/table-column-reordering/constants.js","../src/plugins/table-column-reordering/reducers.js","../src/plugins/table/constants.js","../src/plugins/table-column-reordering/computeds.js","../src/plugins/table-column-resizing/computeds.js","../src/plugins/table-column-resizing/reducers.js","../src/plugins/table-edit-column/constants.js","../src/plugins/table-edit-row/constants.js","../src/plugins/table-header-row/constants.js","../src/plugins/table-edit-column/helpers.js","../src/plugins/table-edit-column/computeds.js","../src/plugins/table-edit-row/helpers.js","../src/plugins/table-edit-row/computeds.js","../src/plugins/table-filter-row/constants.js","../src/plugins/table-filter-row/helpers.js","../src/plugins/table-filter-row/computeds.js","../src/plugins/table-group-row/constants.js","../src/plugins/table-group-row/helpers.js","../src/plugins/table-group-row/computeds.js","../src/plugins/table-header-row/helpers.js","../src/plugins/table-header-row/computeds.js","../src/plugins/table-row-detail/constants.js","../src/plugins/table-row-detail/helpers.js","../src/plugins/table-row-detail/reducers.js","../src/plugins/table-row-detail/computeds.js","../src/plugins/table-selection/constants.js","../src/plugins/table-selection/helpers.js","../src/plugins/table-selection/computeds.js","../src/plugins/table/helpers.js","../src/utils/column.js","../src/plugins/table/computeds.js","../src/plugins/table-column-visibility/computeds.js","../src/plugins/table-column-visibility/helpers.js","../src/plugins/column-chooser/computeds.js","../src/plugins/column-chooser/reducers.js","../src/utils/column-geometries.js","../src/utils/table.js","../src/utils/group-panel.js","../src/utils/messages-formatter.js"],"sourcesContent":["export const rowIdGetter = (getRowId, rows) => {\n  if (!getRowId) {\n    const map = new Map(rows.map((row, rowIndex) => [row, rowIndex]));\n    return row => map.get(row);\n  }\n  return getRowId;\n};\n\nconst defaultGetCellValue = (row, columnName) => row[columnName];\nexport const cellValueGetter = (getCellValue = defaultGetCellValue, columns) => {\n  let useFastAccessor = true;\n  const map = columns.reduce((acc, column) => {\n    if (column.getCellValue) {\n      useFastAccessor = false;\n      acc[column.name] = column.getCellValue;\n    }\n    return acc;\n  }, {});\n\n  if (useFastAccessor) {\n    return getCellValue;\n  }\n\n  return (row, columnName) => (map[columnName]\n    ? map[columnName](row, columnName)\n    : getCellValue(row, columnName));\n};\n","export const changeColumnSorting = (state, {\n  columnName, direction, keepOther, sortIndex,\n}) => {\n  const { sorting } = state;\n\n  let nextSorting = [];\n  if (keepOther === true) {\n    nextSorting = sorting.slice();\n  }\n  if (Array.isArray(keepOther)) {\n    nextSorting = sorting.slice()\n      .filter(columnSorting => keepOther.indexOf(columnSorting.columnName) > -1);\n  }\n\n  const columnSortingIndex = sorting\n    .findIndex(columnSorting => columnSorting.columnName === columnName);\n  const columnSorting = sorting[columnSortingIndex];\n  const newColumnSorting = {\n    columnName,\n    direction: direction ||\n      (!columnSorting || columnSorting.direction === 'desc' ? 'asc' : 'desc'),\n  };\n\n  if (columnSortingIndex > -1) {\n    nextSorting.splice(columnSortingIndex, 1);\n  }\n\n  if (direction !== null) {\n    const newIndexFallback = columnSortingIndex > -1 ? columnSortingIndex : nextSorting.length;\n    const newIndex = sortIndex !== undefined ? sortIndex : newIndexFallback;\n    nextSorting.splice(newIndex, 0, newColumnSorting);\n  }\n\n  return {\n    sorting: nextSorting,\n  };\n};\n","export const getColumnSortingDirection = (sorting, columnName) => {\n  const columnSorting = sorting.filter(s => s.columnName === columnName)[0];\n  return columnSorting ? columnSorting.direction : null;\n};\n","/* eslint-disable no-plusplus, no-param-reassign, no-use-before-define, no-constant-condition */\n\nconst merge = (array, auxiliary, lo, mid, hi, compare) => {\n  let i = lo;\n  let j = mid + 1;\n  let k = lo;\n  while (true) {\n    const cmp = compare(array[i], array[j]);\n    if (cmp <= 0) {\n      auxiliary[k++] = array[i++];\n      if (i > mid) {\n        do {\n          auxiliary[k++] = array[j++];\n        } while (j <= hi);\n        break;\n      }\n    } else {\n      auxiliary[k++] = array[j++];\n      if (j > hi) {\n        do {\n          auxiliary[k++] = array[i++];\n        } while (i <= mid);\n        break;\n      }\n    }\n  }\n};\n\nconst sortArrayToAuxiliary = (array, auxiliary, lo, hi, compare) => {\n  if (hi < lo) return;\n  if (hi === lo) {\n    auxiliary[lo] = array[lo];\n    return;\n  }\n  const mid = Math.floor(lo + ((hi - lo) / 2));\n  sortAuxiliaryToArray(array, auxiliary, lo, mid, compare);\n  sortAuxiliaryToArray(array, auxiliary, mid + 1, hi, compare);\n  merge(array, auxiliary, lo, mid, hi, compare);\n};\n\nconst sortAuxiliaryToArray = (array, auxiliary, lo, hi, compare) => {\n  if (hi <= lo) return;\n  const mid = Math.floor(lo + ((hi - lo) / 2));\n  sortArrayToAuxiliary(array, auxiliary, lo, mid, compare);\n  sortArrayToAuxiliary(array, auxiliary, mid + 1, hi, compare);\n  merge(auxiliary, array, lo, mid, hi, compare);\n};\n\nexport default (\n  array,\n  compare = (a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  },\n) => {\n  const result = array.slice();\n  const auxiliary = array.slice();\n  sortAuxiliaryToArray(result, auxiliary, 0, result.length - 1, compare);\n  return result;\n};\n","export const NODE_CHECK = Symbol('node');\n\nexport const rowsToTree = (rows, getRowLevelKey) => {\n  if (!rows.length) return rows;\n\n  const levels = [{ children: [] }];\n\n  rows.forEach((row) => {\n    const levelKey = getRowLevelKey(row);\n    if (levelKey) {\n      const levelIndex = levels.slice(1)\n        .findIndex(level => getRowLevelKey(level.root) === levelKey) + 1;\n      if (levelIndex > 0) {\n        levels.splice(levelIndex, levels.length - levelIndex);\n      }\n      const node = { [NODE_CHECK]: true, root: row, children: [] };\n      levels[levels.length - 1].children.push(node);\n      levels.push(node);\n    } else {\n      levels[levels.length - 1].children.push(row);\n    }\n  });\n\n  return levels[0].children;\n};\n\nexport const treeToRows = (tree, rows = []) => {\n  if (!tree.length) return tree;\n  return tree.reduce(\n    (acc, node) => {\n      if (node[NODE_CHECK]) {\n        acc.push(node.root);\n        treeToRows(node.children, rows);\n      } else {\n        acc.push(node);\n      }\n      return acc;\n    },\n    rows,\n  );\n};\n","import mergeSort from '../../utils/merge-sort';\nimport { NODE_CHECK, rowsToTree, treeToRows } from '../../utils/hierarchical-data';\n\nconst defaultCompare = (a, b) => {\n  if (a < b) return -1;\n  if (a > b) return 1;\n  return 0;\n};\n\nconst createCompare = (sorting, getColumnCompare, getComparableValue) =>\n  sorting.slice()\n    .reverse()\n    .reduce(\n      (prevCompare, columnSorting) => {\n        const { columnName } = columnSorting;\n        const inverse = columnSorting.direction === 'desc';\n        const columnCompare = (getColumnCompare && getColumnCompare(columnName)) || defaultCompare;\n\n        return (aRow, bRow) => {\n          const a = getComparableValue(aRow, columnName);\n          const b = getComparableValue(bRow, columnName);\n          const result = columnCompare(a, b);\n\n          if (result !== 0) {\n            return inverse ? -result : result;\n          }\n          return prevCompare(aRow, bRow);\n        };\n      },\n      () => 0,\n    );\n\nconst sortTree = (tree, compare) => {\n  const sortedTree = tree.map((node) => {\n    if (node[NODE_CHECK]) {\n      return {\n        ...node,\n        children: sortTree(node.children, compare),\n      };\n    }\n    return node;\n  });\n\n  return mergeSort(sortedTree, (a, b) =>\n    compare(a[NODE_CHECK] ? a.root : a, b[NODE_CHECK] ? b.root : b));\n};\n\nconst sortHierarchicalRows = (rows, compare, getRowLevelKey) => {\n  const tree = rowsToTree(rows, getRowLevelKey);\n\n  const sortedTree = sortTree(tree, compare);\n\n  return treeToRows(sortedTree);\n};\n\nexport const sortedRows = (\n  rows,\n  sorting,\n  getCellValue,\n  getColumnCompare,\n  isGroupRow,\n  getRowLevelKey,\n) => {\n  if (!sorting.length || !rows.length) return rows;\n\n  if (!getRowLevelKey) {\n    const compare = createCompare(sorting, getColumnCompare, getCellValue);\n    return mergeSort(rows.slice(), compare);\n  }\n\n  const compare = createCompare(sorting, getColumnCompare, (row, columnName) => {\n    if (isGroupRow(row)) {\n      if (row.groupedBy === columnName) {\n        return row.value;\n      }\n      return undefined;\n    }\n    return getCellValue(row, columnName);\n  });\n  return sortHierarchicalRows(\n    rows,\n    compare,\n    getRowLevelKey,\n  );\n};\n","export const changeColumnFilter = (filters, { columnName, config }) => {\n  const filterIndex = filters.findIndex(f => f.columnName === columnName);\n  const nextState = filters.slice();\n\n  if (config) {\n    const filter = { columnName, ...config };\n    if (filterIndex > -1) {\n      nextState.splice(filterIndex, 1, filter);\n    } else {\n      nextState.push(filter);\n    }\n  } else {\n    nextState.splice(filterIndex, 1);\n  }\n\n  return nextState;\n};\n","export const getColumnFilterConfig = (filters, columnName) => {\n  if (!filters.length) { return null; }\n\n  const filter = filters.filter(s => s.columnName === columnName)[0];\n  if (!filter) return null;\n\n  const { columnName: _, ...config } = filter;\n  return config;\n};\n","import { NODE_CHECK, rowsToTree, treeToRows } from '../../utils/hierarchical-data';\n\nconst toLowerCase = value => String(value).toLowerCase();\n\nconst defaultPredicate = (value, filter) =>\n  toLowerCase(value).indexOf(toLowerCase(filter.value)) > -1;\n\nconst filterTree = (tree, predicate) =>\n  tree.reduce(\n    (acc, node) => {\n      if (node[NODE_CHECK]) {\n        const filteredChildren = filterTree(node.children, predicate);\n        if (filteredChildren.length > 0) {\n          acc.push({\n            ...node,\n            children: filteredChildren,\n          });\n          return acc;\n        } else if (predicate(node.root)) {\n          acc.push(node.root);\n          return acc;\n        }\n      }\n\n      if (predicate(node)) {\n        acc.push(node);\n        return acc;\n      }\n\n      return acc;\n    },\n    [],\n  );\n\nconst filterHierarchicalRows = (rows, predicate, getRowLevelKey, isGroupRow) => {\n  const tree = rowsToTree(rows, getRowLevelKey);\n\n  const filteredTree = filterTree(tree, (row) => {\n    if (isGroupRow(row)) {\n      if (row.collapsedRows) {\n        return row.collapsedRows.findIndex(predicate) > -1;\n      }\n      return false;\n    }\n    return predicate(row);\n  });\n\n  return treeToRows(filteredTree);\n};\n\nexport const filteredRows = (\n  rows,\n  filters,\n  getCellValue,\n  getColumnPredicate,\n  isGroupRow,\n  getRowLevelKey,\n) => {\n  if (!filters.length || !rows.length) return rows;\n\n  const predicate = filters.reduce(\n    (prevPredicate, filter) => {\n      const { columnName, ...filterConfig } = filter;\n      const customPredicate = getColumnPredicate && getColumnPredicate(columnName);\n      const columnPredicate = customPredicate || defaultPredicate;\n\n      return (row) => {\n        const result = columnPredicate(getCellValue(row, columnName), filterConfig, row);\n        return result && prevPredicate(row);\n      };\n    },\n    () => true,\n  );\n\n  if (!getRowLevelKey) {\n    return rows.filter(predicate);\n  }\n\n  return filterHierarchicalRows(rows, predicate, getRowLevelKey, isGroupRow);\n};\n","export const GROUP_KEY_SEPARATOR = '|';\n","import { GROUP_KEY_SEPARATOR } from './constants';\n\nconst applyColumnGrouping = (grouping, { columnName, groupIndex }) => {\n  const nextGrouping = grouping.slice();\n  const groupingIndex = nextGrouping.findIndex(g => g.columnName === columnName);\n  let targetIndex = groupIndex;\n\n  if (groupingIndex > -1) {\n    nextGrouping.splice(groupingIndex, 1);\n  } else if (groupIndex === undefined) {\n    targetIndex = nextGrouping.length;\n  }\n\n  if (targetIndex > -1) {\n    nextGrouping.splice(targetIndex, 0, {\n      columnName,\n    });\n  }\n\n  return nextGrouping;\n};\n\nexport const changeColumnGrouping = ({ grouping, expandedGroups }, { columnName, groupIndex }) => {\n  const nextGrouping = applyColumnGrouping(grouping, { columnName, groupIndex });\n\n  const ungroupedColumnIndex = grouping.findIndex((group, index) =>\n    !nextGrouping[index] || group.columnName !== nextGrouping[index].columnName);\n  if (ungroupedColumnIndex === -1) {\n    return {\n      grouping: nextGrouping,\n    };\n  }\n\n  const filteredExpandedGroups = expandedGroups.filter(group =>\n    group.split(GROUP_KEY_SEPARATOR).length <= ungroupedColumnIndex);\n  if (filteredExpandedGroups.length === expandedGroups.length) {\n    return {\n      grouping: nextGrouping,\n    };\n  }\n\n  return {\n    grouping: nextGrouping,\n    expandedGroups: filteredExpandedGroups,\n  };\n};\n\nexport const toggleExpandedGroups = (state, { groupKey }) => {\n  const expandedGroups = state.expandedGroups.slice();\n  const groupKeyIndex = expandedGroups.indexOf(groupKey);\n\n  if (groupKeyIndex > -1) {\n    expandedGroups.splice(groupKeyIndex, 1);\n  } else {\n    expandedGroups.push(groupKey);\n  }\n\n  return {\n    expandedGroups,\n  };\n};\n\nexport const draftColumnGrouping = ({ grouping, draftGrouping }, { columnName, groupIndex }) => ({\n  draftGrouping: applyColumnGrouping(draftGrouping || grouping, { columnName, groupIndex }),\n});\n\nexport const cancelColumnGroupingDraft = () => ({\n  draftGrouping: null,\n});\n","export const GRID_GROUP_TYPE = 'group';\nexport const GRID_GROUP_CHECK = Symbol(`${GRID_GROUP_TYPE}_check`);\nexport const GRID_GROUP_LEVEL_KEY = Symbol(`${GRID_GROUP_TYPE}_levelKey`);\n\n","import {\n  GROUP_KEY_SEPARATOR,\n} from '../grouping-state/constants';\nimport {\n  GRID_GROUP_TYPE,\n  GRID_GROUP_CHECK,\n  GRID_GROUP_LEVEL_KEY,\n} from './constants';\n\nexport const groupRowChecker = row => row[GRID_GROUP_CHECK];\n\nexport const groupRowLevelKeyGetter = row => row[GRID_GROUP_LEVEL_KEY];\n\nconst defaultColumnCriteria = value => ({\n  key: String(value),\n  value,\n});\n\nexport const groupedRows = (\n  rows,\n  grouping,\n  getCellValue,\n  getColumnCriteria,\n  keyPrefix = '',\n) => {\n  if (!grouping.length) return rows;\n\n  const { columnName } = grouping[0];\n  const groupCriteria = (getColumnCriteria && getColumnCriteria(columnName))\n    || defaultColumnCriteria;\n  const groups = rows\n    .reduce((acc, row) => {\n      const { key, value = key } = groupCriteria(getCellValue(row, columnName), row);\n      const sameKeyItems = acc.get(key);\n\n      if (!sameKeyItems) {\n        acc.set(key, [value, key, [row]]);\n      } else {\n        sameKeyItems[2].push(row);\n      }\n      return acc;\n    }, new Map());\n\n  const groupedBy = grouping[0].columnName;\n  const nestedGrouping = grouping.slice(1);\n  return [...groups.values()]\n    .reduce((acc, [value, key, items]) => {\n      const compoundKey = `${keyPrefix}${key}`;\n      acc.push({\n        [GRID_GROUP_CHECK]: true,\n        [GRID_GROUP_LEVEL_KEY]: `${GRID_GROUP_TYPE}_${groupedBy}`,\n        groupedBy,\n        compoundKey,\n        key,\n        value,\n      });\n      acc.push(...groupedRows(\n        items,\n        nestedGrouping,\n        getCellValue,\n        getColumnCriteria,\n        `${compoundKey}${GROUP_KEY_SEPARATOR}`,\n      ));\n      return acc;\n    }, []);\n};\n\nexport const expandedGroupRows = (rows, grouping, expandedGroups) => {\n  if (!grouping.length) return rows;\n\n  const groupingColumnNames = grouping.map(columnGrouping => columnGrouping.columnName);\n  const expandedGroupsSet = new Set(expandedGroups);\n  let currentGroupExpanded = true;\n  let currentGroupLevel = 0;\n\n  return rows.reduce((acc, row) => {\n    if (!row[GRID_GROUP_CHECK]) {\n      if (currentGroupExpanded) {\n        acc.push(row);\n      } else {\n        acc[acc.length - 1].collapsedRows.push(row);\n      }\n      return acc;\n    }\n\n    const groupLevel = groupingColumnNames.indexOf(row.groupedBy);\n    if (groupLevel > currentGroupLevel && !currentGroupExpanded) {\n      return acc;\n    }\n\n    currentGroupExpanded = expandedGroupsSet.has(row.compoundKey);\n    currentGroupLevel = groupLevel;\n\n    if (currentGroupExpanded) {\n      acc.push(row);\n    } else {\n      acc.push({\n        ...row,\n        collapsedRows: [],\n      });\n    }\n\n    return acc;\n  }, []);\n};\n","import {\n  GROUP_KEY_SEPARATOR,\n} from '../grouping-state/constants';\nimport {\n  GRID_GROUP_TYPE,\n  GRID_GROUP_CHECK,\n  GRID_GROUP_LEVEL_KEY,\n} from '../integrated-grouping/constants';\n\nexport const customGroupedRows = (\n  currentRows,\n  grouping,\n  getChildGroups,\n  rootRows = currentRows,\n  keyPrefix = '',\n) => {\n  if (!currentRows || !currentRows.length) return [];\n  if (!grouping.length) return currentRows;\n\n  const groupedBy = grouping[0].columnName;\n  const nestedGrouping = grouping.slice(1);\n  return getChildGroups(currentRows, grouping[0], rootRows)\n    .reduce((acc, { key, value = key, childRows }) => {\n      const compoundKey = `${keyPrefix}${key}`;\n      acc.push({\n        [GRID_GROUP_CHECK]: true,\n        [GRID_GROUP_LEVEL_KEY]: `${GRID_GROUP_TYPE}_${groupedBy}`,\n        groupedBy,\n        compoundKey,\n        key,\n        value,\n      });\n      acc.push(...customGroupedRows(\n        childRows,\n        nestedGrouping,\n        getChildGroups,\n        rootRows,\n        `${compoundKey}${GROUP_KEY_SEPARATOR}`,\n      ));\n      return acc;\n    }, []);\n};\n\nexport const customGroupingRowIdGetter = (getRowId, rows) => {\n  const firstRow = rows.find(row => !row[GRID_GROUP_CHECK]);\n  if (!firstRow || getRowId(firstRow)) {\n    return getRowId;\n  }\n  const map = new Map(rows\n    .filter(row => !row[GRID_GROUP_CHECK])\n    .map((row, rowIndex) => [row, rowIndex]));\n\n  return row => map.get(row);\n};\n","export const groupingPanelItems = (columns, grouping, draftGrouping) => {\n  const items = draftGrouping.map(({ columnName }) => ({\n    column: columns.find(c => c.name === columnName),\n    draft: !grouping.some(columnGrouping => columnGrouping.columnName === columnName),\n  }));\n\n  grouping.forEach(({ columnName }, index) => {\n    if (draftGrouping.some(columnGrouping => columnGrouping.columnName === columnName)) return;\n    items.splice(index, 0, {\n      column: columns.find(c => c.name === columnName),\n      draft: true,\n    });\n  });\n\n  return items;\n};\n","export const setCurrentPage = (prevPage, page) => page;\nexport const setPageSize = (prevPageSize, size) => size;\n","const PAGE_HEADERS_OVERFLOW_ERROR =\n  'Max row level exceeds the page size. Consider increasing the page size.';\n\nexport const paginatedRows = (rows, pageSize, page) => (\n  pageSize ?\n    rows.slice(pageSize * page, pageSize * (page + 1)) :\n    rows\n);\n\nexport const rowsWithPageHeaders = (rows, pageSize, getRowLevelKey) => {\n  if (!pageSize || !getRowLevelKey) return rows;\n\n  let result = rows.slice();\n\n  let headerRows = [];\n  let currentIndex = 0;\n  while (result.length > currentIndex) {\n    const row = result[currentIndex];\n    const levelKey = getRowLevelKey(row);\n    if (levelKey) {\n      const headerIndex = headerRows.findIndex(headerRow => getRowLevelKey(headerRow) === levelKey);\n      if (headerIndex === -1) {\n        headerRows = [...headerRows, row];\n      } else {\n        headerRows = [...headerRows.slice(0, headerIndex), row];\n      }\n      if (headerRows.length >= pageSize) {\n        throw new Error(PAGE_HEADERS_OVERFLOW_ERROR);\n      }\n    }\n    const indexInPage = currentIndex % pageSize;\n    if (indexInPage < headerRows.length && row !== headerRows[indexInPage]) {\n      result = [\n        ...result.slice(0, currentIndex),\n        headerRows[indexInPage],\n        ...result.slice(currentIndex),\n      ];\n    }\n    currentIndex += 1;\n  }\n\n  return result;\n};\n\nexport const pageCount = (count, pageSize) => (\n  pageSize ? Math.ceil(count / pageSize) : 1\n);\n\nexport const rowCount = rows => rows.length;\n","export const firstRowOnPage = (currentPage, pageSize, totalCount) => {\n  if (totalCount === 0) {\n    return 0;\n  }\n  return pageSize ? (currentPage * pageSize) + 1 : 1;\n};\n\nexport const lastRowOnPage = (currentPage, pageSize, totalRowCount) => {\n  let result = totalRowCount;\n  if (pageSize) {\n    const index = (currentPage + 1) * pageSize;\n    result = index > totalRowCount ? totalRowCount : index;\n  }\n\n  return result;\n};\n","export const toggleSelection = (selection, { rowIds, state }) => {\n  const rowIdsSet = new Set(rowIds);\n\n  let rowsState = state;\n  if (rowsState === undefined) {\n    const availableSelection = selection.filter(rowId => rowIdsSet.has(rowId));\n    rowsState = availableSelection.length !== rowIdsSet.size;\n  }\n\n  if (rowsState) {\n    const selectionSet = new Set(selection);\n    return [\n      ...selection,\n      ...rowIds.filter(rowId => !selectionSet.has(rowId)),\n    ];\n  }\n\n  return selection.filter(rowId => !rowIdsSet.has(rowId));\n};\n","export const getAvailableToSelect = (rows, getRowId, isGroupRow) => {\n  let dataRows = rows;\n  if (isGroupRow) {\n    dataRows = dataRows.filter(row => !isGroupRow(row));\n  }\n  return dataRows.map(row => getRowId(row));\n};\n\nexport const someSelected = ({ selection, availableToSelect }) => {\n  const selectionSet = new Set(selection);\n\n  return availableToSelect.length !== 0 && selectionSet.size !== 0\n    && availableToSelect.some(elem => selectionSet.has(elem))\n    && availableToSelect.some(elem => !selectionSet.has(elem));\n};\n\nexport const allSelected = ({ selection, availableToSelect }) => {\n  const selectionSet = new Set(selection);\n\n  return selectionSet.size !== 0 && availableToSelect.length !== 0\n    && !availableToSelect.some(elem => !selectionSet.has(elem));\n};\n","export const startEditRows = (prevEditingRowIds, { rowIds }) =>\n  [...prevEditingRowIds, ...rowIds];\n\nexport const stopEditRows = (prevEditingRowIds, { rowIds }) => {\n  const rowIdSet = new Set(rowIds);\n  return prevEditingRowIds.filter(id => !rowIdSet.has(id));\n};\n\nexport const addRow = (addedRows, { row } = { row: {} }) => [...addedRows, row];\n\nexport const changeAddedRow = (addedRows, { rowId, change }) => {\n  const result = addedRows.slice();\n  result[rowId] = { ...result[rowId], ...change };\n  return result;\n};\n\nexport const cancelAddedRows = (addedRows, { rowIds }) => {\n  const result = [];\n  const indexSet = new Set(rowIds);\n  addedRows.forEach((row, index) => {\n    if (!indexSet.has(index)) {\n      result.push(row);\n    }\n  });\n  return result;\n};\n\nexport const changeRow = (prevRowChanges, { rowId, change }) => {\n  const prevChange = prevRowChanges[rowId] || {};\n  return {\n    ...prevRowChanges,\n    [rowId]: {\n      ...prevChange,\n      ...change,\n    },\n  };\n};\n\nexport const cancelChanges = (prevRowChanges, { rowIds }) => {\n  const result = { ...prevRowChanges };\n  rowIds.forEach((rowId) => {\n    delete result[rowId];\n  });\n  return result;\n};\n\nexport const deleteRows = (deletedRowIds, { rowIds }) => [...deletedRowIds, ...rowIds];\n\nexport const cancelDeletedRows = (deletedRowIds, { rowIds }) => {\n  const rowIdSet = new Set(rowIds);\n  return deletedRowIds.filter(rowId => !rowIdSet.has(rowId));\n};\n","export const changedRowsByIds = (changes, rowIds) => {\n  const result = {};\n  rowIds.forEach((rowId) => {\n    result[rowId] = changes[rowId];\n  });\n  return result;\n};\n\nexport const addedRowsByIds = (addedRows, rowIds) => {\n  const rowIdSet = new Set(rowIds);\n  const result = [];\n  addedRows.forEach((row, index) => {\n    if (rowIdSet.has(index)) {\n      result.push(row);\n    }\n  });\n  return result;\n};\n\nconst defaultCreateRowChange = (row, value, columnName) => ({ [columnName]: value });\nexport const createRowChangeGetter = (\n  createRowChange = defaultCreateRowChange,\n  columnExtensions = [],\n) => {\n  const map = columnExtensions.reduce((acc, columnExtension) => {\n    if (columnExtension.createRowChange) {\n      acc[columnExtension.columnName] = columnExtension.createRowChange;\n    }\n    return acc;\n  }, {});\n\n  return (row, value, columnName) => {\n    if (map[columnName]) {\n      return map[columnName](row, value, columnName);\n    }\n    return createRowChange(row, value, columnName);\n  };\n};\n","export const getRowChange = (rowChanges, rowId) => rowChanges[rowId] || {};\n","export const TABLE_REORDERING_TYPE = 'reordering';\n","export const changeColumnOrder = (order, { sourceColumnName, targetColumnName }) => {\n  const sourceColumnIndex = order.indexOf(sourceColumnName);\n  const targetColumnIndex = order.indexOf(targetColumnName);\n  const newOrder = order.slice();\n\n  newOrder.splice(sourceColumnIndex, 1);\n  newOrder.splice(targetColumnIndex, 0, sourceColumnName);\n  return newOrder;\n};\n","export const TABLE_DATA_TYPE = 'data';\nexport const TABLE_NODATA_TYPE = 'nodata';\n","import { TABLE_DATA_TYPE } from '../table/constants';\nimport { TABLE_REORDERING_TYPE } from './constants';\n\nexport const orderedColumns = (tableColumns, order) => {\n  const result = tableColumns.slice();\n\n  result.sort((a, b) => {\n    if (a.type !== TABLE_DATA_TYPE || b.type !== TABLE_DATA_TYPE) return 0;\n\n    const aPos = order.indexOf(a.column.name);\n    const bPos = order.indexOf(b.column.name);\n    return aPos - bPos;\n  });\n\n  return result;\n};\n\nexport const tableHeaderRowsWithReordering = tableHeaderRows => [\n  {\n    key: TABLE_REORDERING_TYPE,\n    type: TABLE_REORDERING_TYPE,\n    height: 0,\n  },\n  ...tableHeaderRows,\n];\n\nexport const draftOrder = (order, sourceColumnIndex, targetColumnIndex) => {\n  if (sourceColumnIndex === -1\n    || targetColumnIndex === -1\n    || sourceColumnIndex === targetColumnIndex) {\n    return order;\n  }\n\n  const result = order.slice();\n  const sourceColumn = order[sourceColumnIndex];\n  result.splice(sourceColumnIndex, 1);\n  result.splice(targetColumnIndex, 0, sourceColumn);\n\n  return result;\n};\n","const UNSET_COLUMN_WIDTH_ERROR = [\n  'The \"$1\" column\\'s width is not specified.',\n  'The TableColumnResizing plugin requires that all columns have the specified width.',\n].join('\\n');\n\nexport const tableColumnsWithWidths = (tableColumns, columnWidths, draftColumnWidths) =>\n  tableColumns\n    .reduce((acc, tableColumn) => {\n      if (tableColumn.type === 'data') {\n        const columnName = tableColumn.column.name;\n        const isCurrentColumn = elem => elem.columnName === columnName;\n        const column = draftColumnWidths.find(isCurrentColumn)\n          || columnWidths.find(isCurrentColumn);\n        const width = column && column.width;\n        if (width === undefined) {\n          throw new Error(UNSET_COLUMN_WIDTH_ERROR.replace('$1', columnName));\n        }\n        acc.push({ ...tableColumn, width });\n      } else {\n        acc.push(tableColumn);\n      }\n      return acc;\n    }, []);\n","const MIN_SIZE = 40;\n\nexport const changeTableColumnWidth = (state, { columnName, shift }) => {\n  const { columnWidths } = state;\n  const nextColumnWidth = columnWidths.slice();\n  const index = nextColumnWidth.findIndex(elem => elem.columnName === columnName);\n  const updatedColumn = nextColumnWidth[index];\n  const size = Math.max(MIN_SIZE, updatedColumn.width + shift);\n  nextColumnWidth.splice(index, 1, { columnName, width: size });\n\n  return {\n    columnWidths: nextColumnWidth,\n  };\n};\n\nexport const draftTableColumnWidth = (state, { columnName, shift }) => {\n  const { columnWidths } = state;\n  const updatedColumn = columnWidths.find(elem => elem.columnName === columnName);\n  const size = Math.max(MIN_SIZE, updatedColumn.width + shift);\n\n  return {\n    draftColumnWidths: [{ columnName: updatedColumn.columnName, width: size }],\n  };\n};\n\nexport const cancelTableColumnWidthDraft = () => ({\n  draftColumnWidths: [],\n});\n","export const TABLE_EDIT_COMMAND_TYPE = 'editCommand';\n","export const TABLE_ADDED_TYPE = 'added';\nexport const TABLE_EDIT_TYPE = 'edit';\n","export const TABLE_HEADING_TYPE = 'heading';\n","import { TABLE_ADDED_TYPE, TABLE_EDIT_TYPE } from '../table-edit-row/constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\nimport { TABLE_HEADING_TYPE } from '../table-header-row/constants';\nimport { TABLE_EDIT_COMMAND_TYPE } from './constants';\n\nexport const isHeadingEditCommandsTableCell = (tableRow, tableColumn) =>\n  tableRow.type === TABLE_HEADING_TYPE && tableColumn.type === TABLE_EDIT_COMMAND_TYPE;\nexport const isEditCommandsTableCell = (tableRow, tableColumn) =>\n  (tableRow.type === TABLE_DATA_TYPE || tableRow.type === TABLE_ADDED_TYPE\n  || tableRow.type === TABLE_EDIT_TYPE) && tableColumn.type === TABLE_EDIT_COMMAND_TYPE;\n","import { TABLE_EDIT_COMMAND_TYPE } from './constants';\n\nexport const tableColumnsWithEditing = (tableColumns, width) =>\n  [{ key: TABLE_EDIT_COMMAND_TYPE, type: TABLE_EDIT_COMMAND_TYPE, width }, ...tableColumns];\n","import { TABLE_ADDED_TYPE, TABLE_EDIT_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\n\nexport const isEditTableCell = (tableRow, tableColumn) =>\n  (tableRow.type === TABLE_ADDED_TYPE || tableRow.type === TABLE_EDIT_TYPE)\n  && tableColumn.type === TABLE_DATA_TYPE;\nexport const isAddedTableRow = tableRow =>\n  tableRow.type === TABLE_ADDED_TYPE;\nexport const isEditTableRow = tableRow =>\n  tableRow.type === TABLE_EDIT_TYPE;\n","import { TABLE_ADDED_TYPE, TABLE_EDIT_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\n\nexport const tableRowsWithEditing = (tableRows, editingRowIds, addedRows, rowHeight) => {\n  const rowIds = new Set(editingRowIds);\n  const editedTableRows = tableRows\n    .map(tableRow => (\n      tableRow.type === TABLE_DATA_TYPE && rowIds.has(tableRow.rowId)\n        ? {\n          ...tableRow,\n          type: TABLE_EDIT_TYPE,\n          height: rowHeight,\n        }\n        : tableRow\n    ));\n\n  const addedTableRows = addedRows\n    .map((row, rowIndex) => ({\n      key: `${TABLE_ADDED_TYPE}_${rowIndex}`,\n      type: TABLE_ADDED_TYPE,\n      rowId: rowIndex,\n      height: rowHeight,\n      row,\n    }));\n\n  return [\n    ...addedTableRows.reverse(),\n    ...editedTableRows,\n  ];\n};\n","export const TABLE_FILTER_TYPE = 'filter';\n","import { TABLE_FILTER_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\n\nexport const isFilterTableCell = (tableRow, tableColumn) =>\n  tableRow.type === TABLE_FILTER_TYPE && tableColumn.type === TABLE_DATA_TYPE;\nexport const isFilterTableRow = tableRow => tableRow.type === TABLE_FILTER_TYPE;\n","import { TABLE_FILTER_TYPE } from './constants';\n\nexport const tableHeaderRowsWithFilter = (headerRows, rowHeight) =>\n  [...headerRows, { key: TABLE_FILTER_TYPE, type: TABLE_FILTER_TYPE, height: rowHeight }];\n","export const TABLE_GROUP_TYPE = 'group';\n","import { TABLE_GROUP_TYPE } from './constants';\n\nexport const isGroupTableCell = (tableRow, tableColumn) =>\n  tableRow.type === TABLE_GROUP_TYPE && tableColumn.type === TABLE_GROUP_TYPE\n  && tableRow.row.groupedBy === tableColumn.column.name;\nexport const isGroupIndentTableCell = (tableRow, tableColumn) =>\n  tableRow.type === TABLE_GROUP_TYPE && tableColumn.type === TABLE_GROUP_TYPE\n  && tableRow.row.groupedBy !== tableColumn.column.name;\nexport const isGroupTableRow = tableRow => tableRow.type === TABLE_GROUP_TYPE;\n","import { TABLE_DATA_TYPE } from '../table/constants';\nimport { TABLE_GROUP_TYPE } from './constants';\n\nconst tableColumnsWithDraftGrouping =\n  (tableColumns, grouping, draftGrouping, showColumnWhenGrouped) => tableColumns\n    .reduce((acc, tableColumn) => {\n      if (tableColumn.type !== TABLE_DATA_TYPE) {\n        acc.push(tableColumn);\n        return acc;\n      }\n\n      const columnName = tableColumn.column.name;\n      const columnGroupingExists = grouping\n        .some(columnGrouping => columnGrouping.columnName === columnName);\n      const columnDraftGroupingExists = draftGrouping\n        .some(columnGrouping => columnGrouping.columnName === columnName);\n\n      if ((!columnGroupingExists && !columnDraftGroupingExists)\n        || showColumnWhenGrouped(columnName)) {\n        acc.push(tableColumn);\n      } else if ((!columnGroupingExists && columnDraftGroupingExists)\n        || (columnGroupingExists && !columnDraftGroupingExists)) {\n        acc.push({\n          ...tableColumn,\n          draft: true,\n        });\n      }\n      return acc;\n    }, []);\n\nexport const tableColumnsWithGrouping = (\n  columns,\n  tableColumns,\n  grouping,\n  draftGrouping,\n  indentColumnWidth,\n  showColumnWhenGrouped,\n) => [\n  ...grouping.map((columnGrouping) => {\n    const groupedColumn = columns.find(column => column.name === columnGrouping.columnName);\n    return {\n      key: `${TABLE_GROUP_TYPE}_${groupedColumn.name}`,\n      type: TABLE_GROUP_TYPE,\n      column: groupedColumn,\n      width: indentColumnWidth,\n    };\n  }),\n  ...tableColumnsWithDraftGrouping(tableColumns, grouping, draftGrouping, showColumnWhenGrouped),\n];\n\nexport const tableRowsWithGrouping = (tableRows, isGroupRow) =>\n  tableRows.map((tableRow) => {\n    if (tableRow.type !== TABLE_DATA_TYPE || !isGroupRow(tableRow.row)) {\n      return tableRow;\n    }\n    return {\n      ...tableRow,\n      key: `${TABLE_GROUP_TYPE}_${tableRow.row.compoundKey}`,\n      type: TABLE_GROUP_TYPE,\n      colSpanStart: `${TABLE_GROUP_TYPE}_${tableRow.row.groupedBy}`,\n    };\n  });\n","import { TABLE_HEADING_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\n\nexport const isHeadingTableCell = (tableRow, tableColumn) =>\n  tableRow.type === TABLE_HEADING_TYPE && tableColumn.type === TABLE_DATA_TYPE;\n\nexport const isHeadingTableRow = tableRow => (tableRow.type === TABLE_HEADING_TYPE);\n","import { TABLE_HEADING_TYPE } from './constants';\n\nexport const tableRowsWithHeading = headerRows =>\n  [{ key: TABLE_HEADING_TYPE, type: TABLE_HEADING_TYPE }, ...headerRows];\n","export const TABLE_DETAIL_TYPE = 'detail';\n","import { TABLE_DETAIL_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\n\nexport const isDetailRowExpanded = (expandedRowIds, rowId) => expandedRowIds.indexOf(rowId) > -1;\nexport const isDetailToggleTableCell = (tableRow, tableColumn) =>\n  tableColumn.type === TABLE_DETAIL_TYPE && tableRow.type === TABLE_DATA_TYPE;\nexport const isDetailTableRow = tableRow => tableRow.type === TABLE_DETAIL_TYPE;\n","export const toggleDetailRowExpanded = (prevExpanded, { rowId, state }) => {\n  const expandedRowIds = prevExpanded.slice();\n  const expandedIndex = expandedRowIds.indexOf(rowId);\n  const rowState = state !== undefined ? state : expandedIndex === -1;\n\n  if (expandedIndex > -1 && !rowState) {\n    expandedRowIds.splice(expandedIndex, 1);\n  } else if (expandedIndex === -1 && rowState) {\n    expandedRowIds.push(rowId);\n  }\n\n  return expandedRowIds;\n};\n","import { TABLE_DETAIL_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\n\nexport const tableRowsWithExpandedDetail = (tableRows, expandedRowIds, rowHeight) => {\n  let result = tableRows;\n  expandedRowIds\n    .forEach((expandedRowId) => {\n      const rowIndex = result.findIndex(tableRow =>\n        tableRow.type === TABLE_DATA_TYPE && tableRow.rowId === expandedRowId);\n      if (rowIndex === -1) return;\n      const insertIndex = rowIndex + 1;\n      const { row, rowId } = result[rowIndex];\n      result = [\n        ...result.slice(0, insertIndex),\n        {\n          key: `${TABLE_DETAIL_TYPE}_${rowId}`,\n          type: TABLE_DETAIL_TYPE,\n          rowId,\n          row,\n          colSpanStart: 0,\n          height: rowHeight,\n        },\n        ...result.slice(insertIndex),\n      ];\n    });\n  return result;\n};\n\nexport const tableColumnsWithDetail = (tableColumns, toggleColumnWidth) => [\n  { key: TABLE_DETAIL_TYPE, type: TABLE_DETAIL_TYPE, width: toggleColumnWidth },\n  ...tableColumns,\n];\n","export const TABLE_SELECT_TYPE = 'select';\n","import { TABLE_SELECT_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\nimport { TABLE_HEADING_TYPE } from '../table-header-row/constants';\n\nexport const isSelectTableCell = (tableRow, tableColumn) =>\n  tableColumn.type === TABLE_SELECT_TYPE && tableRow.type === TABLE_DATA_TYPE;\nexport const isSelectAllTableCell = (tableRow, tableColumn) =>\n  tableColumn.type === TABLE_SELECT_TYPE && tableRow.type === TABLE_HEADING_TYPE;\n","import { TABLE_SELECT_TYPE } from './constants';\n\nexport const tableColumnsWithSelection = (tableColumns, selectionColumnWidth) => [\n  { key: TABLE_SELECT_TYPE, type: TABLE_SELECT_TYPE, width: selectionColumnWidth },\n  ...tableColumns,\n];\n","import { TABLE_DATA_TYPE, TABLE_NODATA_TYPE } from './constants';\n\nexport const isNoDataTableRow = tableRow => tableRow.type === TABLE_NODATA_TYPE;\nexport const isDataTableCell = (tableRow, tableColumn) =>\n  tableRow.type === TABLE_DATA_TYPE && tableColumn.type === TABLE_DATA_TYPE;\nexport const isHeaderStubTableCell = (tableRow, headerRows) => headerRows.indexOf(tableRow) > -1;\nexport const isDataTableRow = tableRow => tableRow.type === TABLE_DATA_TYPE;\n","export const getColumnExtension = (columnExtensions, columnName) => {\n  if (!columnExtensions) {\n    return {};\n  }\n  const columnExtension = columnExtensions.find(extension => extension.columnName === columnName);\n  if (!columnExtension) {\n    return {};\n  }\n  return columnExtension;\n};\n","import { TABLE_DATA_TYPE, TABLE_NODATA_TYPE } from './constants';\nimport { getColumnExtension } from '../../utils/column';\n\nexport const tableColumnsWithDataRows = (columns, columnExtensions) =>\n  columns.map((column) => {\n    const { name } = column;\n    const columnExtension = getColumnExtension(columnExtensions, name);\n    return {\n      key: `${TABLE_DATA_TYPE}_${name}`,\n      type: TABLE_DATA_TYPE,\n      width: columnExtension.width,\n      align: columnExtension.align,\n      column,\n    };\n  });\n\nexport const tableRowsWithDataRows = (rows, getRowId) => (\n  !rows.length\n    ? [{ key: TABLE_NODATA_TYPE, type: TABLE_NODATA_TYPE, colSpanStart: 0 }]\n    : rows.map((row) => {\n      const rowId = getRowId(row);\n      return {\n        row,\n        rowId,\n        type: TABLE_DATA_TYPE,\n        key: `${TABLE_DATA_TYPE}_${rowId}`,\n      };\n    }));\n","import { TABLE_DATA_TYPE } from './../table/constants';\n\nexport const visibleTableColumns = (tableColumns, hiddenColumnNames) =>\n  tableColumns.filter(tableColumn =>\n    tableColumn.type !== TABLE_DATA_TYPE ||\n    hiddenColumnNames.indexOf(tableColumn.column.name) === -1);\n","import { TABLE_DATA_TYPE } from '../table/constants';\n\nexport const tableDataColumnsExist = tableColumns =>\n  tableColumns.some(column => column.type === TABLE_DATA_TYPE);\n","export const columnChooserItems = (columns, hiddenColumnNames) =>\n  columns.map(column => ({ column, hidden: hiddenColumnNames.indexOf(column.name) !== -1 }));\n","export const toggleColumn = (hiddenColumnNames, columnName) => (\n  hiddenColumnNames.indexOf(columnName) === -1\n    ? [...hiddenColumnNames, columnName]\n    : hiddenColumnNames.filter(hiddenColumn => hiddenColumn !== columnName)\n);\n","export const getTargetColumnGeometries = (columnGeometries, sourceIndex) => {\n  const sourceWidth = columnGeometries[sourceIndex].right - columnGeometries[sourceIndex].left;\n  const getWidthDifference = index =>\n    columnGeometries[index].right - columnGeometries[index].left - sourceWidth;\n\n  return columnGeometries\n    .map(({\n      top, right, bottom, left,\n    }, targetIndex) => {\n      let leftBorder = left;\n      if (targetIndex > 0 && targetIndex <= sourceIndex) {\n        leftBorder = Math.min(leftBorder, leftBorder - getWidthDifference(targetIndex - 1));\n      }\n      if (targetIndex > sourceIndex) {\n        leftBorder = Math.max(leftBorder, leftBorder + getWidthDifference(targetIndex));\n      }\n      let rightBorder = right;\n      if (targetIndex < columnGeometries.length - 1 && targetIndex >= sourceIndex) {\n        rightBorder = Math.max(rightBorder, rightBorder + getWidthDifference(targetIndex + 1));\n      }\n      if (targetIndex < sourceIndex) {\n        rightBorder = Math.min(rightBorder, rightBorder - getWidthDifference(targetIndex));\n      }\n\n      return {\n        top,\n        right: rightBorder,\n        bottom,\n        left: leftBorder,\n      };\n    });\n};\n","import { easeOutCubic } from '@devexpress/dx-core';\nimport { getTargetColumnGeometries } from './column-geometries';\n\nexport const getTableRowColumnsWithColSpan = (tableColumns, colSpanStart) => {\n  if (colSpanStart === undefined) return tableColumns;\n\n  let span = false;\n  return tableColumns\n    .reduce((acc, tableColumn, columnIndex) => {\n      if (span) return acc;\n      if (columnIndex === colSpanStart || tableColumn.key === colSpanStart) {\n        span = true;\n        return [...acc, { ...tableColumn, colSpan: tableColumns.length - columnIndex }];\n      }\n      return [...acc, tableColumn];\n    }, []);\n};\n\nexport const getTableColumnGeometries = (columns, tableWidth) => {\n  const columnWidths = columns\n    .map(column => column.width);\n\n  const freeSpace = tableWidth;\n  const restrictedSpace = columnWidths\n    .reduce((accum, width) => accum + (width || 0), 0);\n  const freeSpacePortions = columnWidths\n    .reduce((accum, width) => accum + (width === undefined ? 1 : 0), 0);\n  const freeSpacePortion = (freeSpace - restrictedSpace) / freeSpacePortions;\n\n  let lastRightPosition = 0;\n  return columnWidths\n    .map(width => (width === undefined ? freeSpacePortion : width))\n    .map((width) => {\n      lastRightPosition += width;\n      return {\n        left: lastRightPosition - width,\n        right: lastRightPosition,\n      };\n    });\n};\n\nexport const getTableTargetColumnIndex = (columnGeometries, sourceIndex, offset) =>\n  getTargetColumnGeometries(columnGeometries, sourceIndex)\n    .findIndex(({ left, right }) => offset > left && offset < right);\n\n\nconst ANIMATION_DURATION = 200;\n\nconst getAnimationProgress = animation =>\n  (new Date().getTime() - animation.startTime) / ANIMATION_DURATION;\n\nexport const getAnimations = (\n  prevColumns,\n  nextColumns,\n  tableWidth,\n  prevAnimations,\n) => {\n  const prevColumnGeometries = new Map(getTableColumnGeometries(prevColumns, tableWidth)\n    .map((geometry, index) => [prevColumns[index].key, geometry])\n    .map(([key, geometry]) => {\n      const animation = prevAnimations.get(key);\n      if (!animation) return [key, geometry];\n      const progress = easeOutCubic(getAnimationProgress(animation));\n      const left = ((animation.left.to - animation.left.from) * progress) + animation.left.from;\n      return [key, {\n        left,\n        right: geometry.right - (geometry.left - left),\n      }];\n    }));\n\n  const nextColumnGeometries = new Map(getTableColumnGeometries(nextColumns, tableWidth)\n    .map((geometry, index) => [nextColumns[index].key, geometry]));\n\n  return new Map([...nextColumnGeometries.keys()]\n    .map((key) => {\n      const prev = prevColumnGeometries.get(key);\n      const next = nextColumnGeometries.get(key);\n\n      const result = { startTime: new Date().getTime(), style: {} };\n      if (Math.abs(prev.left - next.left) > 1) {\n        result.left = { from: prev.left, to: next.left };\n      }\n      return [key, result];\n    })\n    .filter(animation => animation[1].left));\n};\n\nexport const filterActiveAnimations = animations => new Map([...animations.entries()]\n  .filter(([, animation]) => getAnimationProgress(animation) < 1));\n\nexport const evalAnimations = animations => new Map([...animations.entries()]\n  .map(([key, animation]) => {\n    const progress = easeOutCubic(getAnimationProgress(animation));\n    const result = { ...animation.style };\n    if (animation.left) {\n      const offset = (animation.left.to - animation.left.from) * (progress - 1);\n      result.transform = `translateX(${offset}px)`;\n    }\n    return [key, result];\n  }));\n","import { getTargetColumnGeometries } from './column-geometries';\n\nconst isOnTheSameLine = (geometry, y) => y >= geometry.top && y <= geometry.bottom;\n\nconst rectToObject = ({\n  top, right, bottom, left,\n}) => ({\n  top, right, bottom, left,\n});\n\nconst collapseGapsBetweenItems = geometries =>\n  geometries.map((geometry, index) => {\n    if (index !== geometries.length - 1 && geometry.top === geometries[index + 1].top) {\n      return {\n        ...geometry,\n        right: geometries[index + 1].left,\n      };\n    }\n    return geometry;\n  });\n\nexport const getGroupCellTargetIndex = (geometries, sourceIndex, { x, y }) => {\n  if (geometries.length === 0) return 0;\n\n  const targetGeometries = sourceIndex !== -1\n    ? getTargetColumnGeometries(geometries, sourceIndex)\n    : geometries.map(rectToObject);\n\n  const targetIndex = collapseGapsBetweenItems(targetGeometries)\n    .findIndex((geometry, index) => {\n      const inVerticalBounds = isOnTheSameLine(geometry, y);\n      const inHorizontalBounds = x >= geometry.left && x <= geometry.right;\n      const shouldGoFirst = index === 0 && x < geometry.left;\n      const shouldGoOnLineBreak = !inVerticalBounds &&\n        !!geometries[index - 1] &&\n        isOnTheSameLine(geometries[index - 1], y);\n\n      return (inVerticalBounds && inHorizontalBounds) ||\n        shouldGoFirst ||\n        shouldGoOnLineBreak;\n    });\n\n  return targetIndex === -1 ? geometries.length : targetIndex;\n};\n","const processPattern = (pattern, params) =>\n  Object.keys(params).reduce(\n    (msg, key) =>\n      msg.replace(`{${key}}`, params[key]),\n    pattern,\n  );\n\nexport const getMessagesFormatter = messages => (key, params) => {\n  const message = messages[key];\n\n  if (typeof message === 'function') {\n    return message(params);\n  }\n  if (params) {\n    return processPattern(message, params);\n  }\n  return message;\n};\n"],"names":["rowIdGetter","getRowId","rows","map","Map","row","rowIndex","get","defaultGetCellValue","columnName","cellValueGetter","getCellValue","columns","useFastAccessor","reduce","acc","column","name","changeColumnSorting","state","direction","keepOther","sortIndex","sorting","nextSorting","slice","Array","isArray","filter","indexOf","columnSorting","columnSortingIndex","findIndex","newColumnSorting","splice","newIndexFallback","length","newIndex","undefined","getColumnSortingDirection","s","merge","array","auxiliary","lo","mid","hi","compare","i","j","k","cmp","sortArrayToAuxiliary","Math","floor","sortAuxiliaryToArray","a","b","result","NODE_CHECK","Symbol","rowsToTree","getRowLevelKey","levels","children","forEach","levelKey","levelIndex","level","root","node","push","treeToRows","tree","defaultCompare","createCompare","getColumnCompare","getComparableValue","reverse","prevCompare","inverse","columnCompare","aRow","bRow","sortTree","sortedTree","mergeSort","sortHierarchicalRows","sortedRows","isGroupRow","groupedBy","value","changeColumnFilter","filters","config","filterIndex","f","nextState","getColumnFilterConfig","_","toLowerCase","String","defaultPredicate","filterTree","predicate","filteredChildren","filterHierarchicalRows","filteredTree","collapsedRows","filteredRows","getColumnPredicate","prevPredicate","filterConfig","customPredicate","columnPredicate","GROUP_KEY_SEPARATOR","applyColumnGrouping","grouping","groupIndex","nextGrouping","groupingIndex","g","targetIndex","changeColumnGrouping","expandedGroups","ungroupedColumnIndex","group","index","filteredExpandedGroups","split","toggleExpandedGroups","groupKey","groupKeyIndex","draftColumnGrouping","draftGrouping","cancelColumnGroupingDraft","GRID_GROUP_TYPE","GRID_GROUP_CHECK","GRID_GROUP_LEVEL_KEY","groupRowChecker","groupRowLevelKeyGetter","defaultColumnCriteria","groupedRows","getColumnCriteria","keyPrefix","groupCriteria","groups","key","sameKeyItems","set","nestedGrouping","values","items","compoundKey","expandedGroupRows","groupingColumnNames","columnGrouping","expandedGroupsSet","Set","currentGroupExpanded","currentGroupLevel","groupLevel","has","customGroupedRows","currentRows","getChildGroups","rootRows","childRows","customGroupingRowIdGetter","firstRow","find","groupingPanelItems","c","some","setCurrentPage","prevPage","page","setPageSize","prevPageSize","size","PAGE_HEADERS_OVERFLOW_ERROR","paginatedRows","pageSize","rowsWithPageHeaders","headerRows","currentIndex","headerIndex","headerRow","Error","indexInPage","pageCount","count","ceil","rowCount","firstRowOnPage","currentPage","totalCount","lastRowOnPage","totalRowCount","toggleSelection","selection","rowIds","rowIdsSet","rowsState","availableSelection","rowId","selectionSet","getAvailableToSelect","dataRows","someSelected","availableToSelect","elem","allSelected","startEditRows","prevEditingRowIds","stopEditRows","rowIdSet","id","addRow","addedRows","changeAddedRow","change","cancelAddedRows","indexSet","changeRow","prevRowChanges","prevChange","cancelChanges","deleteRows","deletedRowIds","cancelDeletedRows","changedRowsByIds","changes","addedRowsByIds","defaultCreateRowChange","createRowChangeGetter","createRowChange","columnExtensions","columnExtension","getRowChange","rowChanges","TABLE_REORDERING_TYPE","changeColumnOrder","order","sourceColumnName","targetColumnName","sourceColumnIndex","targetColumnIndex","newOrder","TABLE_DATA_TYPE","TABLE_NODATA_TYPE","orderedColumns","tableColumns","sort","type","aPos","bPos","tableHeaderRowsWithReordering","tableHeaderRows","draftOrder","sourceColumn","UNSET_COLUMN_WIDTH_ERROR","join","tableColumnsWithWidths","columnWidths","draftColumnWidths","tableColumn","isCurrentColumn","width","replace","MIN_SIZE","changeTableColumnWidth","shift","nextColumnWidth","updatedColumn","max","draftTableColumnWidth","cancelTableColumnWidthDraft","TABLE_EDIT_COMMAND_TYPE","TABLE_ADDED_TYPE","TABLE_EDIT_TYPE","TABLE_HEADING_TYPE","isHeadingEditCommandsTableCell","tableRow","isEditCommandsTableCell","tableColumnsWithEditing","isEditTableCell","isAddedTableRow","isEditTableRow","tableRowsWithEditing","tableRows","editingRowIds","rowHeight","editedTableRows","addedTableRows","TABLE_FILTER_TYPE","isFilterTableCell","isFilterTableRow","tableHeaderRowsWithFilter","height","TABLE_GROUP_TYPE","isGroupTableCell","isGroupIndentTableCell","isGroupTableRow","tableColumnsWithDraftGrouping","showColumnWhenGrouped","columnGroupingExists","columnDraftGroupingExists","tableColumnsWithGrouping","indentColumnWidth","groupedColumn","tableRowsWithGrouping","isHeadingTableCell","isHeadingTableRow","tableRowsWithHeading","TABLE_DETAIL_TYPE","isDetailRowExpanded","expandedRowIds","isDetailToggleTableCell","isDetailTableRow","toggleDetailRowExpanded","prevExpanded","expandedIndex","rowState","tableRowsWithExpandedDetail","expandedRowId","insertIndex","tableColumnsWithDetail","toggleColumnWidth","TABLE_SELECT_TYPE","isSelectTableCell","isSelectAllTableCell","tableColumnsWithSelection","selectionColumnWidth","isNoDataTableRow","isDataTableCell","isHeaderStubTableCell","isDataTableRow","getColumnExtension","extension","tableColumnsWithDataRows","align","tableRowsWithDataRows","colSpanStart","visibleTableColumns","hiddenColumnNames","tableDataColumnsExist","columnChooserItems","hidden","toggleColumn","hiddenColumn","getTargetColumnGeometries","columnGeometries","sourceIndex","sourceWidth","right","left","getWidthDifference","top","bottom","leftBorder","min","rightBorder","getTableRowColumnsWithColSpan","span","columnIndex","colSpan","getTableColumnGeometries","tableWidth","freeSpace","restrictedSpace","accum","freeSpacePortions","freeSpacePortion","lastRightPosition","getTableTargetColumnIndex","offset","ANIMATION_DURATION","getAnimationProgress","Date","getTime","animation","startTime","getAnimations","prevColumns","nextColumns","prevAnimations","prevColumnGeometries","geometry","progress","easeOutCubic","to","from","nextColumnGeometries","keys","prev","next","style","abs","filterActiveAnimations","animations","entries","evalAnimations","transform","isOnTheSameLine","y","rectToObject","collapseGapsBetweenItems","geometries","getGroupCellTargetIndex","x","targetGeometries","inVerticalBounds","inHorizontalBounds","shouldGoFirst","shouldGoOnLineBreak","processPattern","pattern","params","Object","msg","getMessagesFormatter","message","messages"],"mappings":"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"}